@page "/websocket"
@rendermode InteractiveServer
@using System.Text;
@using System.Net.WebSockets
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text.Json;
@using Websocket.Client;
@using System.Collections.Generic;
@using Websocket.Client.Threading;
@implements IAsyncDisposable;
@inject IJSRuntime JSRuntime

<h1>Websocket Example</h1>

<h3>Connecting to Bitmex server</h3>
<small>Running: @_client?.IsRunning</small>

@if (_client?.IsRunning == true)
{
    <div class="sticky-top w-50 mb-3 mt-3">
        <form @onsubmit="@SendMessage">

            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Message</span>
                </div>
                <input @bind="@_message" type="text" class="form-control">
                <div class="input-group-append">
                    <button type="submit" class="btn btn-outline-secondary">Send</button>
                </div>
            </div>
        </form>
    </div>
}

<button @onclick="gibAll">Get all types</button>

<button @onclick="test5">Show latest 5</button>

<pre>
    @foreach (var log in GetLogs())
    {
        var timestamp = log.Timestamp.ToLocalTime().ToString("HH:mm:ss.fff");
        switch (log.Severity)
        {
            case LogSeverity.Warning:
            <div class="text-warning">@timestamp @log.Message</div>
                break;
            case LogSeverity.Error:
            <div class="text-danger">@timestamp @log.Message</div>
                break;
            default:
            <div class="text-secondary">@timestamp @log.Message</div>
                break;
        }
    }
</pre>

@code {
    private readonly List<LogMessage> _logs = new();
    private IWebsocketClient? _client;
    private string _message = "ping";
    private JObject o = JObject.Parse(@"{
        'command': 'login',
        'arguments': {
            'userId': '15864606',
            'password': 'imad12E4',
            'appId': 'test',
            'appName': 'test',
        }
    }");

    private JObject temst = JObject.Parse(@"{
	    'command': 'getAllSymbols'
    }");

    StringBuilder downloadedData = new StringBuilder();


    protected override async Task OnInitializedAsync()
    {



        var url = new Uri("wss://ws.xtb.com/demo");
        var StId = "";
        _client = new WebsocketClient(url);

        _client.Name = "XTB";
        _client.ReconnectTimeout = TimeSpan.FromSeconds(120);
        _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
        _client.ReconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
            Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
            _message = JsonConvert.SerializeObject(o);
            _client?.Send(_message);

        });
        _client.DisconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Disconnection happened, type: {info.Type}");
            Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
        });

        _client.MessageReceived.Subscribe(msg =>
        {
        Console.WriteLine($"Message received: {msg}");
        var testJson = @"{""status"":false,""errorCode"":""BE118"",""errorDescr"":""User already logged""}";
        ArraySegment<byte> messi = Encoding.UTF8.GetBytes(testJson);
        Log($"Received: '{msg.Text}'", LogSeverity.Info);
        downloadedData.AppendLine(msg.Text);
        var jsonObject = JObject.Parse(msg.Text);
        var data = jsonObject["status"];
        StId = msg.Text;

        // Create a new variable to store the message
        var receivedMessage = msg.Text;

        Console.WriteLine("Otrzymany string: ", messi);
        Console.WriteLine("Received message: {receivedMessage}");
        });


        Console.WriteLine("Starting...");
        await _client.Start();
        Console.WriteLine("Started.");
    }

    public async ValueTask DisposeAsync()
    {
        if (_client == null)
            return;

        await _client.Stop(WebSocketCloseStatus.NormalClosure, string.Empty);
        _client.Dispose();
    }

    private void SendMessage()
    {
        Log($"Sending: '{_message}'", LogSeverity.Info);
        _client?.Send(_message);
    }

    private void Log(string message, LogSeverity severity)
    {
        _logs.Add(new LogMessage(message, severity, DateTime.UtcNow));
    }

    private LogMessage[] GetLogs() => _logs.ToArray().Reverse().ToArray();

    private record LogMessage(string Message, LogSeverity Severity, DateTime Timestamp);

    private enum LogSeverity
    {
        Info,
        Warning,
        Error
    }

    public void test5()
    {

    }

    public async Task DownloadData()
    {
        string dataText = downloadedData.ToString(); // Get the accumulated data
        byte[] dataBytes = Encoding.UTF8.GetBytes(dataText); // Convert to byte array

        var fileName = "websocket_data.txt";

        var dataObject = new Dictionary<string, object>()
        {
            { "fileName", fileName },
            { "data", Convert.ToBase64String(dataBytes) } // Encode dataBytes to Base64 string for efficient transfer
        };

        var jsonData = JsonConvert.SerializeObject(dataObject);
        var argumentArray = new object[] { jsonData };

        Console.WriteLine("Download file test:", jsonData);

        await JSRuntime.InvokeAsync<object>("downloadFile", argumentArray);


    }

    public void gibAll()
    {
        _message = JsonConvert.SerializeObject(temst);
        _client?.Send(_message);
        DownloadData();

    }



    
}
