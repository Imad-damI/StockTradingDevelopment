@page "/websocket"
@rendermode InteractiveServer
@using System.Text;
@using System.Net.WebSockets
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text.Json;
@using Websocket.Client;
@using System.Collections.Generic;
@using Websocket.Client.Threading;
@implements IAsyncDisposable;
@inject IJSRuntime JSRuntime

<h1>Websocket Example</h1>

<div class="text-center bg-blue-100">
    <input class="border-4 w-1/3 rounded m-6 p-6 h-8
               border-blue-300" @bind-value="SearchText"
           @bind-value:event="oninput" placeholder="Search by stock name" />
</div>

@if (!TestList.Any())
{
    <p>Nothing found</p>
}
else
{
    @if (SearchText?.Length > 0)  // Check if SearchText is not null and has length greater than 0
    {
        <div class="p-2">
            @foreach (var wpis in TestList)
            {
                <p>@wpis</p>
            }
        </div>
    }
    else
    {
        <p>Type something to search...</p>
        // Optional: Display a message when no character is typed
    }
}

<h3>Connecting to Bitmex server</h3>
<small>Running: @_client?.IsRunning</small>

@if (_client?.IsRunning == true)
{
    <div class="sticky-top w-50 mb-3 mt-3">
        <form @onsubmit="@SendMessage">

            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Message</span>
                </div>
                <input @bind="@_message" type="text" class="form-control">
                <div class="input-group-append">
                    <button type="submit" class="btn btn-outline-secondary">Send</button>
                </div>
            </div>
        </form>
    </div>
}

<button @onclick="gibAll">Get all types</button>

<button @onclick="test5">Show latest 5</button>

    @foreach (var log in GetLogs())
    {
        var timestamp = log.Timestamp.ToLocalTime().ToString("HH:mm:ss.fff");
        switch (log.Severity)
        {
            case LogSeverity.Warning:
            <div class="text-warning">@timestamp @log.Message</div>
                break;
            case LogSeverity.Error:
            <div class="text-danger">@timestamp @log.Message</div>
                break;
            default:
            <div class="text-secondary">@timestamp @log.Message</div>
                break;
        }
    }

@code {
    private readonly List<LogMessage> _logs = new();
    private IWebsocketClient? _client;
    private string _message = "ping";
    private JObject o = JObject.Parse(@"{
        'command': 'login',
        'arguments': {
            'userId': '15864606',
            'password': 'imad12E4',
            'appId': 'test',
            'appName': 'test',
        }
    }");

    private JObject temst = JObject.Parse(@"{
	    'command': 'getAllSymbols'
    }");

    public string SearchText = "";

    static string[] ImageList = { "Test1", "Test2", "Test3" };
    List<string> testList = new List<string>(ImageList);

    List<string> TestList => ImageList.Where(
    strest => strest.ToLower().Contains(SearchText.ToLower())).ToList();

    

    private string StId = "";

    

    

    protected override async Task OnInitializedAsync()
    {



        var url = new Uri("wss://ws.xtb.com/demo");
        var StId = "";
        _client = new WebsocketClient(url);

        _client.Name = "XTB";
        _client.ReconnectTimeout = TimeSpan.FromSeconds(120);
        _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
        _client.ReconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
            Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
            _message = JsonConvert.SerializeObject(o);
            _client?.Send(_message);

        });
        _client.DisconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Disconnection happened, type: {info.Type}");
            Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
        });

        _client.MessageReceived.Subscribe(msg =>
        {
            Console.WriteLine($"Message received: {msg}");
            Log($"Received: '{msg.Text}'", LogSeverity.Info);
            string json2 = JsonConvert.SerializeObject(msg.Text);
            //Console.WriteLine($"Json message before serialize: {msg}");
            //Console.WriteLine($"Json message after serialize: " + json2);
            JObject parsed = JObject.Parse(msg.Text);
            //Console.WriteLine("Otrzymany string: " + parsed);

            foreach (var pair in parsed)
            {
                if (pair.Key == "streamSessionId"){
                    StId = pair.Value.ToString();
                    Console.WriteLine("StId: " + StId);
                }
            Console.WriteLine("{0}: {1}", pair.Key, pair.Value);
        }
        });


        Console.WriteLine("Starting...");
        await _client.Start();
        Console.WriteLine("Started.");
    }

    public async ValueTask DisposeAsync()
    {
        if (_client == null)
            return;

        await _client.Stop(WebSocketCloseStatus.NormalClosure, string.Empty);
        _client.Dispose();
    }

    private void SendMessage()
    {
        Log($"Sending: '{_message}'", LogSeverity.Info);
        _client?.Send(_message);
    }

    private void Log(string message, LogSeverity severity)
    {
        _logs.Add(new LogMessage(message, severity, DateTime.UtcNow));
    }

    private LogMessage[] GetLogs() => _logs.ToArray().Reverse().ToArray();

    private record LogMessage(string Message, LogSeverity Severity, DateTime Timestamp);

    private enum LogSeverity
    {
        Info,
        Warning,
        Error
    }

    public void test5()
    {

    }

    public void gibAll()
    {
        _message = JsonConvert.SerializeObject(temst);
        _client?.Send(_message);

    }



    
}
