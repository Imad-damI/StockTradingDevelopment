@page "/websocket"
@rendermode InteractiveServer
@using System.Text;
@using System.Net.WebSockets;
@using Newtonsoft.Json;
@using MySqlConnector;
@using Newtonsoft.Json.Linq;
@using System.Text.Json;
@using Websocket.Client;
@using System.Collections.Generic;
@using Websocket.Client.Threading;
@using STD.Components.Additions;
@using STD.Components.Models;
@implements IAsyncDisposable;
@inject IJSRuntime JSRuntime

<div class="text-center bg-blue-100">
    <input class="bg-success bg-opacity-25"
        @bind-value="SearchText"
        @bind-value:event="oninput" placeholder="Search by stock name" />
</div>
<div>
@if (!TestItems.Any())
{
    <p>Nothing found</p>
}
else
{
    @if (SearchText?.Length > 0)
    {
        <div class="p-2">
            @foreach (var item in TestList)
            {

                    <div class="border border-primary border-opacity-75 rounded bg-info bg-opacity-25 p-1 mb-3 d-flex justify-content-between align-items-center">
                        <div><p class="my-auto">@item.Symbol - @item.Description (@item.Bid zł)</p></div>
                        <div><button class="btn btn-outline-success btn-sm" @onclick="() => ShowQuantityInput(item)">Use Bid</button></div>
                </div>


                @if (_selectedItemForQuantity?.Symbol == item.Symbol) // Only show for selected item
                {
                        <div class="d-flex align-items-center  mb-2">
                            <input class="bg-info bg-opacity-10 p-1" type="number" @bind="_quantityInput" placeholder="Enter quantity" />
                            <button class="btn btn-outline-success btn-sm p-1 ms-4" @onclick="HandleBuyStockClick">Buy Stock</button>
                        </div>
                }

            }
        </div>
    }
    else
    {
        <p>Type something to search...</p>
    }
}
</div>
<span class="@(_client.IsRunning ? "dot-green" : "dot-red")" title="@(_client.IsRunning ? "Running" : "Not Running")">
</span>


@code {
    private bool IsCandlestickSelected { get; set; } = true;
    private readonly List<LogMessage> _logs = new();
    private IWebsocketClient? _client;
    private string _message = "ping";
    private JObject o = JObject.Parse(@"{
        'command': 'login',
        'arguments': {
            'userId': '15864606',
            'password': 'imad12E4',
            'appId': 'test',
            'appName': 'test',
        }
    }");

    public class CHART_LAST_INFO_RECORD
    {
        public int Period { get; set; }
        public double Start { get; set; }  // Changed to long for seconds since 1970
        public string SymbolC { get; set; }

        public CHART_LAST_INFO_RECORD(int period, string symbol)
        {
            Period = period;
            Start = TimeZoneInfo.ConvertTimeToUtc(DateTime.Now.AddDays(-1), TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time")).Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;
            SymbolC = symbol;
        }
    }

    private JObject? can;

    public void canWeCandle()
    {
        int period = 5; // Replace with your desired period
        string symbol = "PKN.PL"; // Replace with your symbol

        // Create an instance of CHART_LAST_INFO_RECORD
        CHART_LAST_INFO_RECORD info = new CHART_LAST_INFO_RECORD(period, symbol);

        // Serialize the info object to JSON string
        string jsonString = JsonConvert.SerializeObject(info);

        can = JObject.Parse(@"{
          'command': 'getChartLastRequest',
          'arguments': {
            'info': " + jsonString + @"
          }
        }");
    }


    private JObject temst = JObject.Parse(@"{
	    'command': 'getAllSymbols'
    }");

    public class StockCandle
    {
        public DateTime Date { get; set; }
        public double Open { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Close { get; set; }
        public long Volume { get; set; }
    }

    public string SearchText = "";
    public List<Item> TestItems = new List<Item>();


    public class Item
    {
        public string? Symbol { get; set; }
        public string? Description { get; set; }
        public float Bid { get; set; }
    }

    private List<Item> TestList => TestItems
    .Where(item =>
        (item.Description == null || // Optional check for null descriptions
         !item.Description.ToUpperInvariant().Contains("CFD")) &&
        ((item.Symbol?.Split('.')?.FirstOrDefault() ?? "").ToLower().Contains(SearchText.ToLower()) ||
         (item.Description?.ToLower().Contains(SearchText.ToLower()) ?? false))
    )
    .Take(25) // Limit to the first 25 items (optional)
    .ToList();

    private Item? _selectedItemForQuantity;

    private int? _quantityInput;

    protected override async Task OnInitializedAsync()
    {



        var url = new Uri("wss://ws.xtb.com/demo");
        var StId = "";
        _client = new WebsocketClient(url);

        _client.Name = "XTB";
        _client.ReconnectTimeout = TimeSpan.FromSeconds(120);
        _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
        _client.ReconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
            Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
            _message = JsonConvert.SerializeObject(o);
            _client?.Send(_message);

        });
        _client.DisconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Disconnection happened, type: {info.Type}");
            Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
        });

        _client.MessageReceived.Subscribe(msg =>
        {
            Log($"Received: '{msg.Text}'", LogSeverity.Info);
            string json2 = JsonConvert.SerializeObject(msg.Text);
            JObject parsed = JObject.Parse(msg.Text);

            foreach (var pair in parsed)
            {
                if (pair.Key == "returnData")
                {
                    List<Item> extractedItems = new List<Item>();

                    if (pair.Value is JArray symbolRecordsArray)
                    {
                        foreach (var element in symbolRecordsArray)
                        {
                            try
                            {
                                var symbol = element["symbol"]?.Value<string>();
                                var description = element["description"]?.Value<string>();
                                var bid = element["bid"].Value<float>();

                                if (bid != 0)
                                {
                                    if (bid != 0)
                                    {
                                        TestItems.Add(new Item { Symbol = symbol, Description = description, Bid = bid });
                                    }
                                    else
                                    {
                                        Console.WriteLine($"Invalid bid format after cleaning: {bid}");
                                    }
                                }
                                else
                                {
                                    // Handle missing bid value (assign default or skip element)
                                    Console.WriteLine($"Missing bid value in element: {element}");
                                }
                            }
                            catch (Exception ex)
                            {
                                // Handle potential errors during extraction
                                Console.WriteLine($"Error extracting data from element: {ex.Message}");
                            }
                        }
                    }
                    else
                    {
                        // Handle unexpected data type for pair.Value
                        Console.WriteLine($"Unexpected data type for returnData: {pair.Value.GetType().Name}");
                    }
                }
                List<Item> modifiedItems = new List<Item>();
                foreach (Item item in TestItems)
                {
                    string newSymbol = item.Symbol?.Split('.')?.FirstOrDefault() ?? "";
                    modifiedItems.Add(new Item { Symbol = newSymbol, Description = item.Description, Bid = item.Bid });
                }

                TestItems = modifiedItems; // Update the original list with modified items

                TestItems = TestItems.DistinctBy(item => item.Symbol).ToList();
            }
        });


        Console.WriteLine("Starting...");
        await _client.Start();
        Console.WriteLine("Started.");
        gibAll();
    }

    public async ValueTask DisposeAsync()
    {
        if (_client == null)
            return;

        await _client.Stop(WebSocketCloseStatus.NormalClosure, string.Empty);
        _client.Dispose();
    }

    private void SendMessage()
    {
        Log($"Sending: '{_message}'", LogSeverity.Info);
        _client?.Send(_message);
    }

    private void Log(string message, LogSeverity severity)
    {
        _logs.Add(new LogMessage(message, severity, DateTime.UtcNow));
    }

    private LogMessage[] GetLogs() => _logs.ToArray().Reverse().ToArray();

    private record LogMessage(string Message, LogSeverity Severity, DateTime Timestamp);

    private enum LogSeverity
    {
        Info,
        Warning,
        Error
    }

    public void test5()
    {
        canWeCandle();
        Console.WriteLine("canWeCandle Json: " + can);
    }
      
    public void HandleBidClick(float bidValue, int quantity)

    {
        // Find the selected item based on bidValue (assuming bidValue is unique)
        var selectedItem = TestItems.FirstOrDefault(item => item.Bid == bidValue);

        if (selectedItem != null)
        {
            Console.WriteLine($"Quantity value is equal to: {quantity}");
            // Call helper function to insert data into MySQL database
            Task.Run(() => mySQLSqlHelperMain.InsertPortfolio(selectedItem.Symbol!, selectedItem.Description!, bidValue, quantity));
            Console.WriteLine($"Bid value clicked and data inserted for: {selectedItem.Symbol}");
        }
        else
        {
            Console.WriteLine("Could not find matching item for bid value.");
        }
    }

    public void gibAll()
    {
        _message = JsonConvert.SerializeObject(temst);
        _client?.Send(_message);
        InvokeAsync(StateHasChanged);
    }

    private async Task PromptForQuantity(Item item)
    {
        int? quantity = await JSRuntime.InvokeAsync<int>("prompt", new object[] { "Enter quantity:", "0" });

        if (quantity.HasValue && quantity.Value > 0)
        {
            HandleBidClick(item.Bid, quantity.Value);
        }
        else
        {
            // Handle invalid quantity input (e.g., display a message)
        }
    }

    private void ShowQuantityInput(Item item)
    {
        if (_selectedItemForQuantity == null)
        {
            // No item selected, proceed as usual
            _selectedItemForQuantity = item;
            _quantityInput = null; // Reset input value for fresh entry
        }
        else
        {
            // Item already selected, deselect it
            _selectedItemForQuantity = null;
            _quantityInput = null; // Reset input value on deselection
        }
        StateHasChanged(); // Trigger UI update
    }


    private async Task HandleBuyStockClick()
    {
        if (_quantityInput.HasValue && _quantityInput.Value > 0)
        {
            HandleBidClick(_selectedItemForQuantity!.Bid, _quantityInput.Value);
            _quantityInput = null; // Reset input after successful buy
            _selectedItemForQuantity = null;
            StateHasChanged(); // Hide input box
        }
        else
        {
            // Handle invalid quantity (e.g., display message)
            Console.WriteLine("Invalid quantity entered. Please enter a positive integer.");
        }
    }

}