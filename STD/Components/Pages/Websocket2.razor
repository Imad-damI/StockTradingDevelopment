﻿﻿
@page "/websocket"
@rendermode InteractiveServer
@using System.Text;
@using System.Net.WebSockets
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text.Json;
@using Websocket.Client;
@using System.Collections.Generic;
@using Websocket.Client.Threading;
@using STD.Components.Additions;
@implements IAsyncDisposable;
@inject IJSRuntime JSRuntime

<h1>Websocket Example</h1>

<div class="text-center bg-blue-100">
    <input class="border-4 w-1/3 rounded m-6 p-6 h-8
               border-blue-300" @bind-value="SearchText"
           @bind-value:event="oninput" placeholder="Search by stock name" />
</div>

@if (!TestItems.Any())
{
    <p>Nothing found</p>
}
else
{
    @if (SearchText?.Length > 0)
    {
        <div class="p-2">
            @foreach (var item in TestList)
            {
                <p>
                    @item.Symbol - @item.Description (@item.Bid)
                    <button @onclick="() => HandleBidClick(item.Bid)">Use Bid</button>
                </p>
            }
        </div>
    }
    else
    {
        <p>Type something to search...</p>
    }
}


<h3>Connecting to Bitmex server</h3>
<small>Running: @_client?.IsRunning</small>

@if (_client?.IsRunning == true)
{
    <div class="sticky-top w-50 mb-3 mt-3">
        <form @onsubmit="@SendMessage">

            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Message</span>
                </div>
                <input @bind="@_message" type="text" class="form-control">
                <div class="input-group-append">
                    <button type="submit" class="btn btn-outline-secondary">Send</button>
                </div>
            </div>
        </form>
    </div>
}

<button @onclick="gibAll">Get all types</button>

<button @onclick="test5">Show latest 5</button>

@code {
    private readonly List<LogMessage> _logs = new();
    private IWebsocketClient? _client;
    private string _message = "ping";
    private JObject o = JObject.Parse(@"{
        'command': 'login',
        'arguments': {
            'userId': '15864606',
            'password': 'imad12E4',
            'appId': 'test',
            'appName': 'test',
        }
    }");

    private JObject temst = JObject.Parse(@"{
	    'command': 'getAllSymbols'
    }");

    public string SearchText = "";
    public List<Item> TestItems = new List<Item>();


    private string StId = "";

    public class Item
    {
        public string? Symbol { get; set; }
        public string? Description { get; set; }
        public float Bid { get; set; }
    }

    private List<Item> TestList => TestItems
    .Where(item =>
        (item.Description == null || // Optional check for null descriptions
         !item.Description.ToUpperInvariant().Contains("CFD")) &&
        ((item.Symbol?.Split('.')?.FirstOrDefault() ?? "").ToLower().Contains(SearchText.ToLower()) ||
         (item.Description?.ToLower().Contains(SearchText.ToLower()) ?? false))
    )
    .Take(25) // Limit to the first 25 items (optional)
    .ToList();


    protected override async Task OnInitializedAsync()
    {



        var url = new Uri("wss://ws.xtb.com/demo");
        var StId = "";
        _client = new WebsocketClient(url);

        _client.Name = "XTB";
        _client.ReconnectTimeout = TimeSpan.FromSeconds(120);
        _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
        _client.ReconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
            Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
            _message = JsonConvert.SerializeObject(o);
            _client?.Send(_message);

        });
        _client.DisconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Disconnection happened, type: {info.Type}");
            Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
        });

        _client.MessageReceived.Subscribe(msg =>
        {
            //Console.WriteLine($"Message received: {msg}");
            Log($"Received: '{msg.Text}'", LogSeverity.Info);
            string json2 = JsonConvert.SerializeObject(msg.Text);
            JObject parsed = JObject.Parse(msg.Text);

            foreach (var pair in parsed)
            {
                if (pair.Key == "streamSessionId")
                {
                    StId = pair.Value.ToString();
                    Console.WriteLine("StId: " + StId);
                }
                if (pair.Key == "returnData")
                {
                    List<Item> extractedItems = new List<Item>();

                    if (pair.Value is JArray symbolRecordsArray)
                    {
                        foreach (var element in symbolRecordsArray)
                        {
                            try
                            {
                                var symbol = element["symbol"]?.Value<string>();
                                var description = element["description"]?.Value<string>();
                                var bid = element["bid"].Value<float>();

                                if (bid != 0)
                                {

                                    // Trim leading/trailing whitespaces (including potential invisible characters)


                                    Console.WriteLine("Bid string po parse" + bid);
                                    if (bid != 0)
                                    {
                                        TestItems.Add(new Item { Symbol = symbol, Description = description, Bid = bid });
                                    }
                                    else
                                    {
                                        Console.WriteLine($"Invalid bid format after cleaning: {bid}");
                                    }
                                }
                                else
                                {
                                    // Handle missing bid value (assign default or skip element)
                                    Console.WriteLine($"Missing bid value in element: {element}");
                                }
                            }
                            catch (Exception ex)
                            {
                                // Handle potential errors during extraction
                                Console.WriteLine($"Error extracting data from element: {ex.Message}");
                            }
                        }
                    }
                    else
                    {
                        // Handle unexpected data type for pair.Value
                        Console.WriteLine($"Unexpected data type for returnData: {pair.Value.GetType().Name}");
                    }

                    // Use the extractedItems list for further processing or display
                }

                //Console.WriteLine("Tutaj jest przerwa między wierszami! {0}: {1} A tutaj się kończy Value! przy okazji key to {0}", pair.Key, pair.Value);
                List<Item> modifiedItems = new List<Item>();
                foreach (Item item in TestItems)
                {
                    string newSymbol = item.Symbol?.Split('.')?.FirstOrDefault() ?? "";
                    modifiedItems.Add(new Item { Symbol = newSymbol, Description = item.Description, Bid = item.Bid });
                }

                TestItems = modifiedItems; // Update the original list with modified items

                TestItems = TestItems.DistinctBy(item => item.Symbol).ToList();
            }

        });


        Console.WriteLine("Starting...");
        await _client.Start();
        Console.WriteLine("Started.");
    }

    public async ValueTask DisposeAsync()
    {
        if (_client == null)
            return;

        await _client.Stop(WebSocketCloseStatus.NormalClosure, string.Empty);
        _client.Dispose();
    }

    private void SendMessage()
    {
        Log($"Sending: '{_message}'", LogSeverity.Info);
        _client?.Send(_message);
    }

    private void Log(string message, LogSeverity severity)
    {
        _logs.Add(new LogMessage(message, severity, DateTime.UtcNow));
    }

    private LogMessage[] GetLogs() => _logs.ToArray().Reverse().ToArray();

    private record LogMessage(string Message, LogSeverity Severity, DateTime Timestamp);

    private enum LogSeverity
    {
        Info,
        Warning,
        Error
    }

    public void test5()
    {

    }

    public void HandleBidClick(float bidValue)
    {
        // Implement your logic here using the bidValue parameter
        // This function will be called when a button is clicked
        Console.WriteLine($"Bid value clicked: {bidValue}"); // Example output
    }

    public void gibAll()
    {
        _message = JsonConvert.SerializeObject(temst);
        _client?.Send(_message);

    }




}