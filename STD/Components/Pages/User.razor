@page "/user"

@rendermode InteractiveServer
@using System.Text;
@using System.Net.WebSockets;
@using Newtonsoft.Json;
@using MySqlConnector;
@using Newtonsoft.Json.Linq;
@using System.Text.Json;
@using Websocket.Client;
@using System.Collections.Generic;
@using Websocket.Client.Threading;
@using STD.Components.Additions;
@using STD.Components.Models;

@inject IJSRuntime JSRuntime

<h1>User</h1>

@if (portfolioItems.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Description</th>
                <th>Bid</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Current Bid</th>
                <th>Difference</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in portfolioItems)
            {
                var currentItem = TestItems.FirstOrDefault(t => t.Symbol == item.Symbol);
                item.CurrentBid = currentItem?.Bid ?? 0; // Assign 0 if not found

                <tr>
                    <td>@item.Symbol</td>
                    <td>@item.Description</td>
                    <td>@item.Bid</td>
                    <td>@item.Amount</td>
                    <td>@item.Date.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@item.CurrentBid</td>
                    <td>
                        @if (item.CurrentBid == 0)
                        {
                            <span style="color:gray;">loading...</span>
                        }
                        else
                        {
                            <span style="color:@((item.CurrentBid > item.Bid) ? "green" : "red")">
                                @((Math.Max(0, item.CurrentBid - item.Bid)))
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No items found in your portfolio.</p>
}

<small>Running: @_client?.IsRunning</small>

@code {
    private readonly List<LogMessage> _logs = new();
    private IWebsocketClient? _client;
    private string _message = "ping";
    private JObject o = JObject.Parse(@"{
        'command': 'login',
        'arguments': {
            'userId': '15864606',
            'password': 'imad12E4',
            'appId': 'test',
            'appName': 'test',
        }
    }");

    private JObject temst = JObject.Parse(@"{
	    'command': 'getAllSymbols'
    }");

    public string SearchText = "";
    public List<Item> TestItems = new List<Item>();


    private string StId = "";

    public class Item
    {
        public string? Symbol { get; set; }
        public string? Description { get; set; }
        public float Bid { get; set; }
    }

    private List<Item> TestList => TestItems
    .Where(item =>
        (item.Description == null || // Optional check for null descriptions
         !item.Description.ToUpperInvariant().Contains("CFD")) &&
        ((item.Symbol?.Split('.')?.FirstOrDefault() ?? "").ToLower().Contains(SearchText.ToLower()) ||
         (item.Description?.ToLower().Contains(SearchText.ToLower()) ?? false))
    )
    .Take(25) // Limit to the first 25 items (optional)
    .ToList();

    private List<PortfolioItem> portfolioItems = new List<PortfolioItem>();

    public class PortfolioItem
    {
        public int Id { get; set; }
        public string Symbol { get; set; }
        public string Description { get; set; }
        public float Bid { get; set; } // Original bid from portfolio
        public float CurrentBid { get; set; } // Downloaded current bid from websocket
        public int Amount { get; set; }
        public DateTime Date { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {

        portfolioItems = await GetPortfolioData();

        var url = new Uri("wss://ws.xtb.com/demo");
        var StId = "";
        _client = new WebsocketClient(url);

        _client.Name = "XTB";
        _client.ReconnectTimeout = TimeSpan.FromSeconds(120);
        _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
        _client.ReconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
            Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
            _message = JsonConvert.SerializeObject(o);
            _client?.Send(_message);

        });
        _client.DisconnectionHappened.Subscribe(info =>
        {
            Console.WriteLine($"Disconnection happened, type: {info.Type}");
            Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
        });

        _client.MessageReceived.Subscribe(msg =>
        {
            //Console.WriteLine($"Message received: {msg}");
            Log($"Received: '{msg.Text}'", LogSeverity.Info);
            string json2 = JsonConvert.SerializeObject(msg.Text);
            JObject parsed = JObject.Parse(msg.Text);

            foreach (var pair in parsed)
            {
                if (pair.Key == "streamSessionId")
                {
                    StId = pair.Value.ToString();
                    Console.WriteLine("StId: " + StId);
                }
                if (pair.Key == "returnData")
                {
                    List<Item> extractedItems = new List<Item>();

                    if (pair.Value is JArray symbolRecordsArray)
                    {
                        foreach (var element in symbolRecordsArray)
                        {
                            try
                            {
                                var symbol = element["symbol"]?.Value<string>();
                                var description = element["description"]?.Value<string>();
                                var bid = element["bid"].Value<float>();

                                if (bid != 0)
                                {

                                    // Trim leading/trailing whitespaces (including potential invisible characters)


                                    Console.WriteLine("Bid string po parse" + bid);
                                    if (bid != 0)
                                    {
                                        TestItems.Add(new Item { Symbol = symbol, Description = description, Bid = bid });
                                    }
                                    else
                                    {
                                        Console.WriteLine($"Invalid bid format after cleaning: {bid}");
                                    }
                                }
                                else
                                {
                                    // Handle missing bid value (assign default or skip element)
                                    Console.WriteLine($"Missing bid value in element: {element}");
                                }
                            }
                            catch (Exception ex)
                            {
                                // Handle potential errors during extraction
                                Console.WriteLine($"Error extracting data from element: {ex.Message}");
                            }
                        }
                    }
                    else
                    {
                        // Handle unexpected data type for pair.Value
                        Console.WriteLine($"Unexpected data type for returnData: {pair.Value.GetType().Name}");
                    }

                    // Use the extractedItems list for further processing or display
                }
                List<Item> modifiedItems = new List<Item>();
                foreach (Item item in TestItems)
                {
                    string newSymbol = item.Symbol?.Split('.')?.FirstOrDefault() ?? "";
                    modifiedItems.Add(new Item { Symbol = newSymbol, Description = item.Description, Bid = item.Bid });
                }

                TestItems = modifiedItems; // Update the original list with modified items

                TestItems = TestItems.DistinctBy(item => item.Symbol).ToList();
            }
            RefreshTableData();

        });


        Console.WriteLine("Starting...");
        await _client.Start();
        Console.WriteLine("Started.");
        gibAll();
    }

    public async ValueTask DisposeAsync()
    {
        if (_client == null)
            return;

        await _client.Stop(WebSocketCloseStatus.NormalClosure, string.Empty);
        _client.Dispose();
    }

    private void SendMessage()
    {
        Log($"Sending: '{_message}'", LogSeverity.Info);
        _client?.Send(_message);
    }

    private void Log(string message, LogSeverity severity)
    {
        _logs.Add(new LogMessage(message, severity, DateTime.UtcNow));
    }

    private LogMessage[] GetLogs() => _logs.ToArray().Reverse().ToArray();

    private record LogMessage(string Message, LogSeverity Severity, DateTime Timestamp);

    private enum LogSeverity
    {
        Info,
        Warning,
        Error
    }

    public void gibAll()
    {
        _message = JsonConvert.SerializeObject(temst);
        _client?.Send(_message);

    }

    private async Task RefreshTableData()
    {
        // Update TestItems with downloaded data
        // ... (your logic to update TestItems based on downloaded data) ...

        await InvokeAsync(StateHasChanged); // Switch to Dispatcher thread and trigger re-render
    }


    private async Task<List<PortfolioItem>> GetPortfolioData()
    {
        using (MySqlConnection connection = mySQLSqlHelper.GetConnection())
        {
            connection.Open();
            string query = "SELECT * FROM portfolio WHERE user_id = @UserId";
            using (var cmd = new MySqlCommand(query, connection))
            {
                cmd.Parameters.AddWithValue("@UserId", 1);
                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    List<PortfolioItem> items = new List<PortfolioItem>();
                    while (await reader.ReadAsync())
                    {
                        items.Add(new PortfolioItem
                            {
                                Id = reader.GetInt32(0),
                                Symbol = reader.GetString(2),
                                Description = reader.GetString(3),
                                Bid = reader.GetFloat(4),
                                Amount = reader.GetInt32(5),
                                Date = reader.GetDateTime(6)
                            });
                    }
                    return items;
                }
            }
        }
    }



}