@rendermode InteractiveServer
@using System.Text;
@using System.Net.WebSockets
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text.Json;
@using Websocket.Client;
@using System.Collections.Generic;
@using Websocket.Client.Threading;
@inject IJSRuntime JSRuntime

<div @class="popup @(IsVisible ? "show" : "")">
    <div class="popup-header">
        <h3 @if="@Title != null">@Title</h3>
        <button @onclick="@(() => ClosePopup())" class="close-btn">&times;</button>
    </div>
    <div class="popup-content">
        @if (IsInputVisible)
        {
            <div class="input-group">
                <p>Enter SQL connection details here.</p>
                <input type="text" @bind="@sqlServer" placeholder="SQL Server" />
                <input type="text" @bind="@sqlDatabase" placeholder="SQL Database" />
                <input type="text" @bind="@sqlUsername" placeholder="Username" />
                <input type="password" @bind="@sqlPassword" placeholder="Password" />
                <button @onclick="@SendBid">Send Bid</button>
            </div>
        }
    </div>
    <button @onclick="@ToggleInputs">Show Inputs</button>
</div>

@code {
    private string sqlServer = "";
    private string sqlDatabase = "";
    private string sqlUsername = "";
    private string sqlPassword = "";

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public bool IsInputVisible { get; set; } = false; // Initially hidden

    public void ShowPopup()
    {
        IsVisible = true;
    }

    private void ClosePopup()
    {
        IsVisible = false;
    }

    private void ToggleInputs()
    {
        IsInputVisible = !IsInputVisible;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsVisible)
        {
           await JSRuntime.InvokeAsync<object>("focusPopup", this); // Optional: Focus the popup on initial display
        }
    }

    private async Task SendBid()
    {
        // Implement your logic to send the bid to SQL here
    }
}
