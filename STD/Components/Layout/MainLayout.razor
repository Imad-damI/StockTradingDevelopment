@using System.Text;
@using System.Net.WebSockets;
@using Newtonsoft.Json;
@using MySqlConnector;
@using Newtonsoft.Json.Linq;
@using System.Text.Json;
@using Websocket.Client;
@using System.Collections.Generic;
@using Websocket.Client.Threading;
@using STD.Components.Additions;
@using STD.Components.Models;

@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject IHostEnvironment Environment

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet" />
<link href="@Environment.ContentRootPath + " /Shared/MainStyle.css" rel="stylesheet" />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>

        <div class="top-row px-4">
            <a href="user">
                <i class="bi bi-person-lines-fill"></i>
            </a>
            <p class="link-light px-4 mt-3">Środki: @walletValue zł</p>
            
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    // private bool _iconMenuActive { get; set; }
    // private string? IconMenuCssClass => _iconMenuActive ? "width: 80px;" : null;

    // protected void ToggleIconMenu(bool iconMenuActive)
    // {
    //     _iconMenuActive = iconMenuActive;
    // }

    private Timer timer;
    private double walletValue { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        walletValue = await GetWalletBalanceFromDatabase();
        timer = new Timer(_ => UpdateWalletValue(), null, 0, 1000);
    }

    private async Task UpdateWalletValue()
    {
        walletValue = await GetWalletBalanceFromDatabase();
        StateHasChanged();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private async Task<double> GetWalletBalanceFromDatabase()
    {
        using (MySqlConnection connection = mySQLSqlHelper.GetConnection())
        {
            try
            {
                connection.Open();
                string query = "SELECT wallet FROM user WHERE id = @UserId";
                using (var cmd = new MySqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@UserId", 1);
                    using (var reader = await cmd.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return reader.GetDouble(0); // Return the fetched wallet balance
                        }
                        else
                        {
                            // Handle error: user not found or wallet balance not available
                            Console.WriteLine("Error: User not found or wallet balance not available.");
                            return 0.0; // Or handle the missing value differently (e.g., throw an exception)
                        }
                    }
                }
            }
            catch (MySqlException ex)
            {
                // Handle database connection or query exception
                Console.WriteLine($"Database error: {ex.Message}");
                return 0.0; // Or handle the error differently (e.g., throw an exception)
            }
        }
    }

    
 
    
}